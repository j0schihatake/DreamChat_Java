version: '3.8'
services:
  # Kafka Cluster
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network

  kafka1:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    networks:
      - kafka-network
    ports:
      - "9092:9092"

  kafka2:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    networks:
      - kafka-network
    ports:
      - "9093:9093"

  # Kafka UI для мониторинга
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka1:9092,kafka2:9093
    networks:
      - kafka-network
    depends_on:
      - kafka1
      - kafka2

  # Spring Backend Application
  chat-backend:
    build: .
    ports:
      - "8081:8081"
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka1:9092,kafka2:9093
      SPRING_PROFILES_ACTIVE: production
    networks:
      - kafka-network
    depends_on:
      - kafka1
      - kafka2
    restart: unless-stopped

  # PostgreSQL для хранения пользователей и чатов
  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: chatdb
      POSTGRES_USER: chatuser
      POSTGRES_PASSWORD: chatpassword
    ports:
      - "5432:5432"
    networks:
      - kafka-network
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Redis для кэширования и WebSocket сессий
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - kafka-network
    command: redis-server --appendonly yes

volumes:
  postgres_data:

networks:
  kafka-network:
    driver: bridge